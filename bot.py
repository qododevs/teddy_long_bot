# bot.py
import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.utils.chat_action import ChatActionMiddleware
from config import BOT_TOKEN
from db import init_db
from handlers import user, admin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, stream=sys.stdout)
logger = logging.getLogger(__name__)

async def db_middleware(handler, event, data):
    from db import async_session
    async with async_session() as session:
        data["session"] = session
        return await handler(event, data)

async def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN or BOT_TOKEN.strip() == "":
        logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return

    logger.info("‚úÖ BOT_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω (–ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤): %s...", BOT_TOKEN[:10])

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    try:
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞.")
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: %s", e)
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=None))
    dp = Dispatcher()

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware
    dp.message.middleware(ChatActionMiddleware())
    dp.update.middleware(db_middleware)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤: —Å–Ω–∞—á–∞–ª–∞ admin (—á—Ç–æ–±—ã –∞–¥–º–∏–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–ª–∞)
    dp.include_router(admin.router)
    dp.include_router(user.router)

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ polling...")
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("üõë Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ polling: %s", e)

if __name__ == "__main__":
    logger.info("Intialized bot script...")
    try:
        asyncio.run(main())
    except Exception as e:
        logger.critical("üî• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: %s", e)
        sys.exit(1)