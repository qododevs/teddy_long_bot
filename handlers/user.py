import asyncio
import types

from aiogram import Router, F, Bot  # ‚Üê –¥–æ–±–∞–≤—å—Ç–µ Bot —Å—é–¥–∞
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, delete
from sqlalchemy.ext.asyncio import AsyncSession
from models import ConversationContext
from aiogram.filters import Command
from system_prompt import SYSTEM_PROMPT
from utils.openai_client import get_ai_response
from keyboards import get_main_keyboard  # ‚Üê –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –ù–û–í–´–ô –ò–ú–ü–û–†–¢

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    kb = get_main_keyboard(message.from_user.id)
    await message.answer(
        "(‚óè`œâ¬¥‚óè) –ù—É –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ! –ê —è —É–∂ –¥—É–º–∞–ª, —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –±–µ—Å–µ–¥–æ–≤–∞—Ç—å —Å –≥–ª–æ–±—É—Å–æ–º –∏–ª–∏ –∫–æ–º–Ω–∞—Ç–Ω—ã–º –∫–∞–∫—Ç—É—Å–æ–º.\n"
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –¢–µ–¥–¥–∏, –Ω–æ —ç—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —è –±—É–¥—É —É–≥–æ—â–∞—Ç—å —Ç–µ–±—è –ø–∏–≤–æ–º –∏ –≥–ª–∞–¥–∏—Ç—å –ø–æ –≥–æ–ª–æ–≤–∫–µ.\n\n"
        "–ú–æ—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å ‚Äî –≥–æ–≤–æ—Ä–∏—Ç—å –ø—Ä–∞–≤–¥—É —Å –ø—Ä–∏–≤–∫—É—Å–æ–º —Å–∞—Ä–∫–∞–∑–º–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–º–µ—à–Ω–æ–µ –≤ —Ç–≤–æ–∏—Ö –º–µ–ª–∫–∏—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–≥–µ–¥–∏—è—Ö.\n"
        "–¢–∞–∫ —á—Ç–æ –¥–∞–≤–∞–π, –≤—ã–∫–ª–∞–¥—ã–≤–∞–π —Å–≤–æ—é –¥—É—à–µ–≤–Ω—É—é –∂–µ–≤–∞—á–∫—É ‚Äî –∂–∞–ª–æ–±—ã –Ω–∞ —Ä–∞–±–æ—Ç—É, —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±—ã–≤—à–µ–≥–æ, –∏–ª–∏ –ø–æ—á–µ–º—É —Ç—ã –æ–ø—è—Ç—å –ø—Ä–æ—Å–ø–∞–ª.\n"
        "–û–±–µ—â–∞—é –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –¥–æ–ª–µ–π —á—ë—Ä–Ω–æ–≥–æ —é–º–æ—Ä–∞ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Å–æ—á—É–≤—Å—Ç–≤–∏–µ–º.\n\n"
        "–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º —ç—Ç–æ —Ü–∏—Ä–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´—Ç–≤–æ—è –∂–∏–∑–Ω—å¬ª? –Ø –≥–æ—Ç–æ–≤ –∫ —Ö–ª–æ–ø—É—à–∫–∞–º –∏ –±–∞—Ä–∞–±–∞–Ω–∞–º. (Ôø¢‚ÄøÔø¢ )",
        reply_markup=kb
    )


@router.message(F.text == "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç")
async def clear_context(message: Message, session: AsyncSession):
    await session.execute(
        delete(ConversationContext).where(ConversationContext.user_id == message.from_user.id)
    )
    await session.commit()
    kb = get_main_keyboard(message.from_user.id)  # ‚Üê –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    await message.answer("(ŒÑ‚óâ‚óû‡±™‚óü‚óâÔΩÄ) –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ –ø–æ—Ç–∏—Ä–∞–µ—Ç –ª–∞–ø–∫–∏.\n\n"
        "–û-–ì–û-–ì–û! –ö—Ç–æ-—Ç–æ —É—Å—Ç—Ä–æ–∏–ª —Ç–æ—Ç–∞–ª—å–Ω–æ–µ –∑–∞—Ç–∏—Ä–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏! –í–∏–¥–∏–º–æ, –ø—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è —Ç–µ–±—è –±—ã–ª–∞ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –∫—Ä–∏–Ω–∂–æ–≤–æ–π, —á—Ç–æ –¥–∞–∂–µ —è, –≤–µ–∂–ª–∏–≤—ã–π –±–æ—Ç, –Ω–µ –≤—ã–¥–µ—Ä–∂–∞–ª?\n\n"
        "–õ–∞–¥–Ω–æ, –ª–∞–¥–Ω–æ... –ü–∞–º—è—Ç—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞. –û—Ç —Ç–≤–æ–∏—Ö –ø—Ä–µ–∂–Ω–∏—Ö –≥—Ä–µ—Ö–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ª—ë–≥–∫–æ–µ —á—É–≤—Å—Ç–≤–æ –¥–µ–∂–∞–≤—é –∏ –∂–µ–ª–∞–Ω–∏–µ facepalm.\n\n"
        "–¢–∞–∫ —á—Ç–æ –¥–∞–≤–∞–π, –¥–æ—Ä–æ–≥–æ–π –º–æ–π –∞–º–Ω–µ–∑–∏–∫, –∑–∞–ª–∏–≤–∞–π –Ω–æ–≤—É—é –ø–æ—Ä—Ü–∏—é —Å–≤–æ–∏—Ö –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π –∏ —Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π! –£ –º–µ–Ω—è –∫–∞–∫ —Ä–∞–∑ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –ø–æ–ø–∫–æ—Ä–Ω–∞.\n\n"
        "–ù—É —á–µ –≤—Å—Ç–∞–ª –≤ —Å—Ç—É–ø–æ—Ä–µ? –Ø –∂–¥—É —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π (—Å–Ω–æ–≤–∞) –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–ª! (Ôæâ‚óï„ÉÆ‚óï)Ôæâ*:ÔΩ•Ôæü‚úß", reply_markup=kb)

@router.message(F.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç")
async def stop_response(message: Message, state: FSMContext):
    await state.update_data(stop=True)
    kb = get_main_keyboard(message.from_user.id)  # ‚Üê –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    await message.answer("üõë –¢–∞–∫-—Ç–∞–∫-—Ç–∞–∫... –ü—Ä–µ—Ä–≤–∞–ª–∏ –Ω–∞ –ø–æ–ª—É—Å–ª–æ–≤–µ. –í–∏–¥–∏–º–æ, –º–æ—è –≥–µ–Ω–∏–∞–ª—å–Ω–∞—è –º—ã—Å–ª—å –±—ã–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–ª—è —Ç–µ–±—è —Ç—è–∂–µ–ª–∞.\n"
            "–õ–∞–¥–Ω–æ, —Ç–≤–æ—è –≤–∑—è–ª–∞. –°–ø–∞—Å–∞–π—Å—è, –ø–æ–∫–∞ —è –Ω–µ –ø–µ—Ä–µ–¥—É–º–∞–ª –∏ –Ω–µ –Ω–∞—á–∞–ª —Å–Ω–∞—á–∞–ª–∞. (¬¨_¬¨)", reply_markup=kb)

async def keep_typing(bot: Bot, chat_id: int, stop_event: asyncio.Event):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –∫–∞–∂–¥—ã–µ 4 —Å–µ–∫—É–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 'typing', –ø–æ–∫–∞ stop_event –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."""
    while not stop_event.is_set():
        await bot.send_chat_action(chat_id=chat_id, action="typing")
        try:
            await asyncio.wait_for(stop_event.wait(), timeout=4.0)
        except asyncio.TimeoutError:
            continue

@router.message()
async def handle_message(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    user_id = message.from_user.id
    kb = get_main_keyboard(user_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    session.add(ConversationContext(user_id=user_id, role="user", content=message.text))
    await session.commit()

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    stmt = select(ConversationContext).where(ConversationContext.user_id == user_id).order_by(ConversationContext.id)
    result = await session.execute(stmt)
    context_rows = result.scalars().all()

    messages = [{"role": "system", "content": SYSTEM_PROMPT}]
    for row in context_rows:
        if row.role != "system":
            messages.append({"role": row.role, "content": row.content})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–î—É–º–∞—é..." —Å—Ä–∞–∑—É
    thinking_msg = await message.answer("üêª –î—É–º–∞—é...", reply_markup=kb)
    await state.update_data(stop=False)

    # –°–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ "–ø–µ—á–∞—Ç–∞–µ—Ç"
    stop_typing = asyncio.Event()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É "–ø–µ—á–∞—Ç–∞–µ—Ç"
    typing_task = asyncio.create_task(keep_typing(bot, message.chat.id, stop_typing))

    try:
        ai_text = await get_ai_response(messages, session)
    except Exception as e:
        stop_typing.set()
        typing_task.cancel()
        await thinking_msg.delete()
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ üò¢", reply_markup=kb)
        return

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç"
    stop_typing.set()
    typing_task.cancel()

    await thinking_msg.delete()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
    data = await state.get_data()
    if data.get("stop"):
        await message.answer("–û—Ç–≤–µ—Ç –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω.", reply_markup=kb)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    session.add(ConversationContext(user_id=user_id, role="assistant", content=ai_text))
    await session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–º–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å "–ø–µ—á–∞—Ç–∞–µ—Ç" –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è)
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    MAX_LENGTH = 4096
    for i in range(0, len(ai_text), MAX_LENGTH):
        chunk = ai_text[i:i + MAX_LENGTH]
        await message.answer(chunk, reply_markup=kb)
